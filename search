#!python3

import argparse
import datetime
import pickle
import sqlite3

import numpy as np
import requests
import sentence_transformers

parser = argparse.ArgumentParser()
parser.add_argument("-d", "--device", help="The PyTorch device to use")
parser.add_argument("search", help="The query to search for")
args = parser.parse_args()

model = sentence_transformers.SentenceTransformer(
    "all-MiniLM-L12-v2", device=args.device or "mps"
)

with open("dump.pickle", "rb") as f:
    everything = pickle.load(f)

search_embed = model.encode(args.search)
for i, art in enumerate(everything):
    embed = art["embedding"]
    similarity = np.dot(embed, search_embed) / (
        np.linalg.norm(embed) * np.linalg.norm(search_embed)
    )
    art["similarity"] = similarity

doc = """
<html>
<body>

"""

conn = sqlite3.connect("news.db")
cur = conn.cursor()

sorted = sorted(everything, key=lambda x: x["similarity"])
num = 1
for i in sorted[-10:]:
    print(f"Article {num}", end="\r")
    num += 1
    cur.execute("SELECT * FROM articles_meta WHERE uid = ?", (i["id"],))
    meta = cur.fetchone()
    formatted = int(str(meta[2])[:-3])
    date = datetime.datetime.fromtimestamp(formatted, datetime.UTC)
    date = date.strftime("%a, %B %d %Y")
    resp = requests.post(
        "http://localhost:11434/api/generate",
        json={
            "model": "llama3",
            "stream": False,
            "prompt": f"Use the following format to provide a summary of the news article included below and don't deviate from the format.\n\n<h4>Main thesis</h4><p>Put the main thesis of the news article here.<h4>Key facts</h4></p><ul><li>First fact in the article, with the source in parenthesis if the article cites another source</li><li>Second fact, again with the source if any</li><li>And so on</li></ul>\n\nBEGIN NEWS ARTICLE\n{i['article']}\nEND NEWS ARTICLE",
        },
    ).json()
    doc += f"""
    <h2>{i['title']}</h2>
    <ul>
    <li>Similarity: {i['similarity']}</li>
    <li>Date: {date}</li>
    <li>URL: {meta[3]}</li>
    <li>Publication: {meta[5]}</li>
    </ul>
    <h3>Summary</h3>
    {resp['response']}
    <details>
    <summary>
    <b>Article</b>
    </summary>
    <p>{i['article']}</p>
    </details>
    """

    out = (
        doc
        + """
</body>
</html>
"""
    )

    with open("out.html", "w") as f:
        f.write(doc)
